Author: James Townley
Project: Newco Test


Usage Example (also in "example.sc"):

// Import stuff

import newco.domain.Types._
import newco.domain.{Bundle, SingleItem}
import newco.api.CartOptimizer

// Create some items

val item1 = SingleItem("Apple", 2.99d)
val item2 = SingleItem("Pear", 3.99d)

// Create some bundles

val bundle1 = Bundle("Apple-mazing", 4.00d, List(item1, item1))
val bundle2 = Bundle("Mix n' Match", 4.50d, List(item1, item2))

// Create an cart: can contain SingleItem and Bundle

val cart : Cart = List(item1, item1, item2)

// Create Api: Only requires knowledge of bundles

val optimizerApi = new CartOptimizer(List(bundle1, bundle2))
val optimizedCart = optimizerApi.optimize(cart)

println(optimizedCart)



Notes:

The technique used assumes a reasonably sized cart, for very full carts a different (less accurate) technique may be preferable.
Was written with TDD technique test are in the /src/test folder
Compiles with SBT "sbt test" should be enough to get it going.

As this is a test and not a "real" application there is no persistent storage and a number of assumptions were made. In a customer situation I would have asked a number of questions to start:
 - How many bundles do you envision having?
 - How many items do you envision having?
 - What would you expected the cart size to be?
 - Can the cart size be limited?
 - If the cart sizes are large, can a best guess be used?
